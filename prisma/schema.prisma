generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  name      String
  username  String
  password  String
  schedules Schedule[]
  visited   Visited[]
}

model Schedule {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @default("New schedule")
  numOfCol  Int       @default(6)
  numOfRow  Int       @default(8)
  isPublic  Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String    @db.ObjectId
  createdAt DateTime  @default(now()) @map("createdAt")
  updatedAt DateTime  @updatedAt @map("updatedAt")
  events    Event[]
  visited   Visited[]
}

model Event {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  time        String
  color       String
  rowNum      Int
  colNum      Int
  schedule    Schedule     @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId  String       @db.ObjectId
  extraFields ExtraField[]
}

model Visited {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  scheduleId String   @db.ObjectId
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExtraField {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  value   String
  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
